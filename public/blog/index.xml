<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blog on violeta</title>
    <link>https://cheshireviolet.github.io/blog/</link>
    <description>Recent content in Blog on violeta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Wed, 21 May 2025 18:35:34 -0300</lastBuildDate>
    <atom:link href="https://cheshireviolet.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Lake com estatísticas do Last.fm</title>
      <link>https://cheshireviolet.github.io/blog/lastfm/</link>
      <pubDate>Wed, 21 May 2025 18:35:34 -0300</pubDate>
      <guid>https://cheshireviolet.github.io/blog/lastfm/</guid>
      <description>&lt;p&gt;Bom dia amigos! Fazia tempo que não postava nada. Últimos 2 meses foram extremamente corridos, muita bagunça e adversidades, mas consegui fazer algo a tempo de manter 1 post por mês.&lt;/p&gt;&#xA;&lt;p&gt;Uma das trends que sigo no BlueSky (que persiste por uns 10 anos?) é a de postar uma colagem dos álbuns mais ouvidos. Existem vários sites que fazem isso, como TapMusic. Gosto bastante, mas gostaria que tivessem mais númerozinhos engraçadinhos.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Bom dia amigos! Fazia tempo que não postava nada. Últimos 2 meses foram extremamente corridos, muita bagunça e adversidades, mas consegui fazer algo a tempo de manter 1 post por mês.</p>
<p>Uma das trends que sigo no BlueSky (que persiste por uns 10 anos?) é a de postar uma colagem dos álbuns mais ouvidos. Existem vários sites que fazem isso, como TapMusic. Gosto bastante, mas gostaria que tivessem mais númerozinhos engraçadinhos.</p>
<p><img src="https://github.com/cheshireviolet/cheshireviolet.github.io/blob/main/content/blog/static/lastfm/collage.jpg" alt="Colagem TapMusic"></p>
<p>Foi aí que decidi adicionar estatísticas a respeito dos álbuns que escuto! Apesar de ser relativamente simples, decidi utilizar uma abordagem mais técnica e escalável, para o futuro.</p>
<h2 id="camada-bronze---o-e-de-etl">Camada Bronze - O E de ETL</h2>
<p>Antes de tudo, precisamos alimentar nossa base. O Last.fm disponibiliza uma API gratuita, que possui um método <code>user.gettopalbums</code>. Bem conveniente, basta colocar usuário, api key, período de tempo e recebemos tudo que precisamos.</p>
<p>A API deles retorna um JSON que tem vários dados que são irrelevantes, então pego apenas <strong>artista</strong>, <strong>nome do album</strong>, <strong>playcount</strong>, <strong>rank</strong> e um <strong>link da imagem de capa do album</strong> e salvo, junto a data do dia da extração em um JSON.</p>
<h2 id="camada-prata---o-t-de-etl">Camada Prata - O T DE ETL</h2>
<p>Para os dados brutos, um simples JSON já resolve tudo. Para a segunda camada, decidi utilizar um banco de dados simples em <strong>SQLite</strong>, utilizando <strong>SQLAlchemy</strong> para a conexão e queries, visto que funciona perfeitamente com <strong>pandas</strong>.</p>
<p>Criei uma tabela para os artistas e uma tabela para os álbuns, o que facilita agregar dados específicos.</p>
<p>Por último, criei uma tabela com algumas estatísticas, que é atualizada com o tempo, conforme ganhamos novas entradas.</p>
<h2 id="o-l-de-etl">O L de ETL</h2>
<p>Como o projeto não é suficientemente grande, a camada Ouro e a camada Prata são a mesma.</p>
<p>Para finalizar o projeto, basta baixar as imagens e usar a biblioteca <strong>PIL</strong> para gerar a colagem e adicionar o texto com as estatísticas.</p>
<p><img src="https://github.com/cheshireviolet/cheshireviolet.github.io/blob/main/content/blog/static/lastfm/collage2.jpg" alt="Colagem Final!"></p>
<p>Existem alguns ajustes a serem feitos, como uma fonte melhor e alguns status extras, mas pretendo atualizar nas próximas semanas.</p>
<p>Também pretendo, assim que tiver tempo, colocar todo esse serviço na nuvem, possibilitando outras pessoas de utilizarem o serviço. Fazer uma WebAPI em Azure e talvez usar algum banco gratuito ,visto que mesmo com licença de estudante acaba ficando caro a curto prazo.</p>
<p>Gostei muito de fazer esse projeto, mas a minha parte preferida dele é que não ficou só num protótipo. :P</p>
<p>Até a próxima!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Quine ofuscada</title>
      <link>https://cheshireviolet.github.io/blog/quine/</link>
      <pubDate>Tue, 01 Apr 2025 14:13:08 -0300</pubDate>
      <guid>https://cheshireviolet.github.io/blog/quine/</guid>
      <description>&lt;p&gt;Olá amigos! Novamente estou aqui, com algo que não é relacionado aos posts anteriores :D&lt;/p&gt;&#xA;&lt;p&gt;O prazo para o projeto e esse post é de &lt;strong&gt;24 horas&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Antes de dormir, estava pensando em &lt;strong&gt;Quines&lt;/strong&gt;, que são códigos que retornam eles mesmos (sem ler o próprio arquivo), e como gostava muito desse conceito que quebrava minha cabecinha simples quando era jovem.&lt;/p&gt;&#xA;&lt;p&gt;Aí pensei um pouco mais, e como seria uma &lt;strong&gt;quine ofuscada&lt;/strong&gt;?&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Olá amigos! Novamente estou aqui, com algo que não é relacionado aos posts anteriores :D</p>
<p>O prazo para o projeto e esse post é de <strong>24 horas</strong>.</p>
<p>Antes de dormir, estava pensando em <strong>Quines</strong>, que são códigos que retornam eles mesmos (sem ler o próprio arquivo), e como gostava muito desse conceito que quebrava minha cabecinha simples quando era jovem.</p>
<p>Aí pensei um pouco mais, e como seria uma <strong>quine ofuscada</strong>?</p>
<p>Recentemente tenho visto muitos videos do <a href="https://www.youtube.com/@_JohnHammond"><strong>John Rammond</strong></a>, aonde ele desbrava no mundo de análise de malware, tenho que interpretar código ofuscado. Não sei <strong>nada</strong> real sobre ofuscação de código, mas vi bastante videos dele para entender que dá pra brincar bastante com isso!</p>
<p>O desafio de fazer uma Quine ofuscada envolve fazer algo que seja consistente e confuso.</p>
<h2 id="a-quine">A Quine</h2>
<p>Peguei da wikipedia, será a base. Fazendo em python pra salvar tempo usando Jupyter no VSCode.</p>
<p><code>c = 'c = %r; print(c %% c)'; print(c % c)</code></p>
<p>A ideia inicial era pegar e criar métodos, então renomear tudo pra ficar confuso, pensando nisso, cheguei no seguinte código:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">def</span> <span class="nf">asd</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="n">qwe</span> <span class="o">=</span> <span class="s1">&#39;def asd()</span><span class="se">\n\t</span><span class="s1">qwe = </span><span class="si">%r</span><span class="s1">;</span><span class="se">\n\t</span><span class="s1">print(qwe </span><span class="si">%%</span><span class="s1"> qwe)</span><span class="se">\n</span><span class="s1">asd()&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">qwe</span> <span class="o">%</span> <span class="n">qwe</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">asd</span><span class="p">()</span></span></span></code></pre></div><p>Não é muito inspirador, é só uma quine levemente mais longa. Então pensei em fazer uma função que substitui os \n:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">def</span> <span class="nf">barraN</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="n">_temp</span> <span class="o">=</span> <span class="mi">55</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="n">_num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">_temp</span><span class="p">))</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">_temp</span><span class="p">))</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="n">_str</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">_num</span><span class="p">)</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">_num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="k">return</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">_str</span><span class="p">))</span></span></span></code></pre></div><p>Fazer uma Quine com isso é meio longo e trabalhoso, então simplifiquei um pouco, por agora:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">def</span> <span class="nf">barraN</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;def barraN():</span><span class="si">{0}</span><span class="se">\t</span><span class="s2">return &#39;</span><span class="se">\\</span><span class="s2">n&#39;</span><span class="si">{0}</span><span class="s2">a = </span><span class="si">{1}{0}</span><span class="s2">print(a.format(barraN(),repr(a)))&#34;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">barraN</span><span class="p">(),</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">)))</span></span></span></code></pre></div><p>Cheatando levemente por usar repr(a), que retorna a propria string de forma pura, com aspas, por exemplo. Mas o ponto não é ser boa em quines, e sim ofuscar isso tudo.</p>
<h2 id="tentativa-1-compressão">Tentativa 1: Compressão</h2>
<p>Vendo o código acima, dá pra brincar um pouco mais com a string final, usando a mesma lógica do barraN. Se fossemos comprimir a string <strong>a</strong>, daria pra, por exemplo, fazer algo assim:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">def</span> <span class="nf">n</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">def</span> <span class="nf">t</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="k">def</span> <span class="nf">d</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;def &#39;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="k">def</span> <span class="nf">r</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;return &#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">{3}</span><span class="s2">n():</span><span class="si">{0}{1}{4}</span><span class="s2">&#39;</span><span class="se">\\</span><span class="s2">n&#39;</span><span class="si">{0}{3}</span><span class="s2">t():</span><span class="si">{0}{1}{4}</span><span class="s2">&#39;</span><span class="se">\\</span><span class="s2">t&#39;</span><span class="si">{0}{3}</span><span class="s2">d():</span><span class="si">{0}{1}{4}</span><span class="s2">&#39;</span><span class="si">{3}</span><span class="s2">&#39;</span><span class="si">{0}{3}</span><span class="s2">r():</span><span class="si">{0}{1}{4}</span><span class="s2">&#39;</span><span class="si">{4}</span><span class="s2">&#39;</span><span class="si">{0}</span><span class="s2">a = </span><span class="si">{2}{0}</span><span class="s2">print(a.format(n(),t(),repr(a),d(),r()))&#34;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">(),</span><span class="n">t</span><span class="p">(),</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="n">d</span><span class="p">(),</span><span class="n">r</span><span class="p">()))</span></span></span></code></pre></div><p>Todas as repetições de 3 ou mais caracteres foram comprimidas, e a string em si já está levemente confusa.</p>
<p>Indo por essa linha, podemos ver que existem duas repetições grandes na string <strong>a</strong>: <strong>{0}{3}</strong> e <strong>{0}{1}{4}</strong></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">def</span> <span class="nf">n</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">def</span> <span class="nf">t</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="k">def</span> <span class="nf">d</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;def &#39;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="k">def</span> <span class="nf">r</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;return &#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">def</span> <span class="nf">z</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="si">{0}{1}{4}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="k">def</span> <span class="nf">y</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="si">{0}{3}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;{{3}}n():</span><span class="si">{0}</span><span class="s2">&#39;</span><span class="se">\\</span><span class="s2">n&#39;</span><span class="si">{1}</span><span class="s2">t():</span><span class="si">{0}</span><span class="s2">&#39;</span><span class="se">\\</span><span class="s2">t&#39;</span><span class="si">{1}</span><span class="s2">d():</span><span class="si">{0}</span><span class="s2">&#39;{{3}}&#39;</span><span class="si">{1}</span><span class="s2">r():</span><span class="si">{0}</span><span class="s2">&#39;{{4}}&#39;</span><span class="si">{1}</span><span class="s2">z():</span><span class="si">{0}</span><span class="s2">&#39;{{5}}&#39;</span><span class="si">{1}</span><span class="s2">y():</span><span class="si">{0}</span><span class="s2">&#39;{{6}}&#39;{{0}}a = {{2}}{{0}}print(a.format(z(),y(),repr(a)).format(n(),t(),repr(a),d(),r(),z(),y()))&#34;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">z</span><span class="p">(),</span><span class="n">y</span><span class="p">(),</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">))</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">(),</span><span class="n">t</span><span class="p">(),</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="n">d</span><span class="p">(),</span><span class="n">r</span><span class="p">(),</span><span class="n">z</span><span class="p">(),</span><span class="n">y</span><span class="p">()))</span></span></span></code></pre></div><p>Bom. Agora a string está gigantesca, e tudo está confuso, fiquei embasbacada em como prosseguir.</p>
<p>O problema é que para conseguir comprimir o z() e o y(), tivemos que criar um novo format, por cima do format antigo.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">def</span> <span class="nf">n</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="k">def</span> <span class="nf">t</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="k">def</span> <span class="nf">d</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;def &#39;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="k">def</span> <span class="nf">r</span><span class="p">():</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;return &#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">def</span> <span class="nf">z</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="si">{0}{1}{4}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="k">def</span> <span class="nf">y</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="si">{0}{3}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;.format(&#39;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;{{3}}n():</span><span class="si">{0}</span><span class="s2">&#39;</span><span class="se">\\</span><span class="s2">n&#39;</span><span class="si">{1}</span><span class="s2">t():</span><span class="si">{0}</span><span class="s2">&#39;</span><span class="se">\\</span><span class="s2">t&#39;</span><span class="si">{1}</span><span class="s2">d():</span><span class="si">{0}</span><span class="s2">&#39;{{3}}&#39;</span><span class="si">{1}</span><span class="s2">r():</span><span class="si">{0}</span><span class="s2">&#39;{{4}}&#39;</span><span class="si">{1}</span><span class="s2">z():</span><span class="si">{0}</span><span class="s2">&#39;{{5}}&#39;</span><span class="si">{1}</span><span class="s2">y():</span><span class="si">{0}</span><span class="s2">&#39;{{6}}&#39;</span><span class="si">{1}</span><span class="s2">f():</span><span class="si">{0}</span><span class="s2">&#39;{{7}}&#39;{{0}}a = {{2}}{{0}}print(a{{7}}z(),y(),repr(a)){{7}}n(),t(),repr(a),d(),r(),z(),y(),f()))&#34;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">z</span><span class="p">(),</span><span class="n">y</span><span class="p">(),</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">))</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">(),</span><span class="n">t</span><span class="p">(),</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="n">d</span><span class="p">(),</span><span class="n">r</span><span class="p">(),</span><span class="n">z</span><span class="p">(),</span><span class="n">y</span><span class="p">(),</span><span class="n">f</span><span class="p">()))</span></span></span></code></pre></div><p>Enquanto o que exatamente está sendo printado é confuso, não diria que o código está ofuscado, e os milhões de método entregam, mais ou menos.</p>
<h2 id="tentativa-2-exec">Tentativa 2: Exec</h2>
<p>Tentei, para fins de teste, fazer uma das versões simples, utilizando exec para criar funções em tempo real:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">def</span> <span class="nf">n</span><span class="p">():</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;def n():</span><span class="si">{0}</span><span class="se">\t</span><span class="s2">return &#39;</span><span class="se">\\</span><span class="s2">n&#39;</span><span class="si">{0}</span><span class="s2">a = </span><span class="si">{1}{0}</span><span class="s2">print(a.format(n(),repr(a)))&#34;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">(),</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">)))</span></span></span></code></pre></div>




<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="s1">&#39;def a(x,y): exec(f</span><span class="se">\&#39;</span><span class="s1">def </span><span class="si">{x}</span><span class="s1">(): return </span><span class="se">\&#34;</span><span class="si">{y}</span><span class="se">\&#34;\&#39;</span><span class="s1">,globals())&#39;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">a</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">q</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">{0}</span><span class="s1">exec(b)</span><span class="si">{0}</span><span class="s1">a(</span><span class="se">\&#39;</span><span class="s1">n</span><span class="se">\&#39;</span><span class="s1">,</span><span class="se">\&#39;\\\\</span><span class="s1">n</span><span class="se">\&#39;</span><span class="s1">)</span><span class="si">{0}</span><span class="s1">q = </span><span class="si">{1}{0}</span><span class="s1">print(b + q.format(n(),repr(q)))&#39;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span> <span class="o">+</span> <span class="n">q</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">(),</span><span class="nb">repr</span><span class="p">(</span><span class="n">q</span><span class="p">)))</span></span></span></code></pre></div><p>Não estou exatamente impressionada, mas dá para melhorar.</p>
<p>Comparando essa versão base, são <strong>126</strong> caracteres contra <strong>205</strong>.</p>
<p>Uma coisa engraçadinha que eu percebi nisso tudo&hellip;&hellip;&hellip;é que uma função para imprimir <strong>\n</strong> vai sempre aumentar em 1 caractere. <strong>&ldquo;NOSSAAAAAAAAA SÓ PERCEBEU AGORA??&rdquo;</strong> Pergunta leitor frustrado. Sim, só agora. Sou besta.</p>
<p>Após ter oitenta bilhões de problemas com , &quot; e  &lsquo;, decidi que vou me contentar com essa versão mesmo. Mas estou longe de terminar.</p>
<h2 id="ultima-tentativa-juro">Ultima tentativa, juro</h2>
<p>Peguei o algoritmo mais bestinha de criptografia que não usasse biblioteca:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;def e(t): return &#39;&#39;.join(chr(ord(c)^456)for c in t)&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">q</span> <span class="o">=</span> <span class="s1">&#39;ƩǨǵǨƳǸƵǂƭưƭƫǠƩǡǂƹǨǵǨƳǹƵǂƸƺơƦƼǠƭǠƹǡǦƮƧƺƥƩƼǠƺƭƸƺǠƩǡǤƺƭƸƺǠƹǡǡǡ&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">e</span><span class="p">(</span><span class="n">q</span><span class="p">)</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="nb">repr</span><span class="p">(</span><span class="n">q</span><span class="p">)))</span></span></span></code></pre></div><p>Gostei bastante de ter feito essa quine, basicamente aquele bloco estranho é igual a <code>'a = {0}\nexec(a)\nq = {1}\nprint(e(q).format(repr(a),repr(q)))'</code></p>
<p>Está simples e engraçadinho, mas ainda dá pra ver que no final das contas estamos printando algo que veio de <strong>q</strong>.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;def e(t): return &#39;&#39;.join(chr(ord(c)^456)for c in t)</span><span class="se">\n</span><span class="s2">c = repr(a)&#34;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s1">&#39;ƭưƭƫǠǪƪǨǵǨǯƩǨǵǨƳǸƵƔƔƦƭưƭƫǠƩǡƔƔƦƩǨǵǨƳǹƵƔƔƦƭưƭƫǠƭǠƩǡǡǯƔƦƸƺơƦƼǠƪǦƮƧƺƥƩƼǠƫǤƺƭƸƺǠƩǡǡǡǪǤƯƤƧƪƩƤƻǠǡǡ&#39;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="n">e</span><span class="p">(</span><span class="n">a</span><span class="p">))</span></span></span></code></pre></div><p>Levemente mais engraçado, agora não dá pra saber o que vai ser executado. Estou feliz, PUTA MERDA ESQUECI DO EPISÓDIO DE HOJE DA NOVELA.</p>
<p>Espero que tenham gostado fuiiiiiiii!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Slay the Spire e Análise de Dados - Parte 1</title>
      <link>https://cheshireviolet.github.io/blog/sixth/</link>
      <pubDate>Tue, 04 Mar 2025 18:25:36 -0300</pubDate>
      <guid>https://cheshireviolet.github.io/blog/sixth/</guid>
      <description>&lt;p&gt;Bom dia amigos! Novamente, eu devia escrever o primeiro DevLog do Choncho Adventure, mas novamente me peguei em uma situação aonde estou mexendo em &lt;strong&gt;outro projeto&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Tive alguns avanços trágicos no Project Mono, que vão mudar um pouco como eu levo o projeto. Aprendi muito maaaaaaaaas ficará para outro post.&lt;/p&gt;&#xA;&lt;h3 id=&#34;tudo-que-foi-falado-aqui-vai-ser-divulgado-bonitinho-no-github-mesmo-soon-&#34;&gt;Tudo que foi falado aqui vai ser divulgado bonitinho no github mesmo, soon ™&lt;/h3&gt;&#xA;&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/646570/Slay_the_Spire/&#34;&gt;Slay the Spire&lt;/a&gt; é um jogo da categoria Roguelike Deckbuilder, não sei dizer se foi o primeiro, mas foi o que influenciou tantos jogos no futuro a ponto de não ter outro tipo de recomendação na minha Steam.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Bom dia amigos! Novamente, eu devia escrever o primeiro DevLog do Choncho Adventure, mas novamente me peguei em uma situação aonde estou mexendo em <strong>outro projeto</strong>.</p>
<p>Tive alguns avanços trágicos no Project Mono, que vão mudar um pouco como eu levo o projeto. Aprendi muito maaaaaaaaas ficará para outro post.</p>
<h3 id="tudo-que-foi-falado-aqui-vai-ser-divulgado-bonitinho-no-github-mesmo-soon-">Tudo que foi falado aqui vai ser divulgado bonitinho no github mesmo, soon ™</h3>
<h2 id="introdução">Introdução</h2>
<p><a href="https://store.steampowered.com/app/646570/Slay_the_Spire/">Slay the Spire</a> é um jogo da categoria Roguelike Deckbuilder, não sei dizer se foi o primeiro, mas foi o que influenciou tantos jogos no futuro a ponto de não ter outro tipo de recomendação na minha Steam.</p>
<p>Comecei a jogar lá quando o jogo estava em Early Access, a atualmente tenho aproximadamente <strong>870 horas.</strong> É meu jogo de conforto e facilmente um dos meus jogos preferidos de todos os tempos.</p>
<p>Logo quando o jogo saiu, os desenvolvedores pegavam dados das runs (<strong>com seu consentimento</strong>) para realizar o balanceamento do jogo, mas os mesmos também ficam guardados localmente, em arquivos <strong>.run</strong> que na verdade são JSON.</p>
<p>Foi uma ideia que deu super certo para os desenvolvedores, o jogo é ridiculamente bem balanceado, com exceção da última personagem lançada, a Watcher, que não recebeu o mesmo carinho de anos de Análise de Dados e patches.</p>
<p>Como é um formato super acessível e leve, houveram diversos projetos ao longo do tempo, super legais, que envolvem esses arquivos.</p>
<p>Existia o SpireLogs, aonde usuários podiam fazer upload de suas runs e então ver dados sobre suas vitórias, derrotas, personagens, cartas, relíquias, mas também podia comparar com todas as outras runs que haviam sido carregadas.</p>
<p>Atualmente existe o <a href="https://slaythereport.kojim.net/">Slay the Report</a>(em jp), aonde usuários também podem fazer upload e download de runs.</p>
<p>Sempre houve esse carinho, tanto pela parte dos desenvolvedores quanto pelos jogadores.</p>
<p>Estou lentamente retornando para a área de dados, então resolvi realizar projetos relacionados, e nada melhor do que pegar uma paixão para trabalhar em cima, né?</p>
<h2 id="objetivo">Objetivo</h2>
<p>Meus objetivos iniciais eram, em nenhuma ordem de importância: Aprender Pandas, Seaborn e PowerBI/Tableau.</p>
<p>Na maior parte da minha vida, em projetos pessoais envolvendo dados eu sempre usei Excel/Google Spreadsheets, mas nisso meus relatórios, apesar de pontuais, não são tão bonitos e engraçadinhos como querem atualmente no mercado de trabalho. Ao mesmo tempo, usar alguma linguagem de programação e bibliotecas relacionadas pode agilizar bastante o processo. Pensei em aprender R, mas eu já mexo com python, então deixa o R pro futuro próximo, a fila está meio grande e o tempo é curto.</p>
<h2 id="estrutura-do-projeto">Estrutura do Projeto</h2>
<p>Não gosto de revelar a grande ideia final por trás de todos os passos, mas dá para já dar uma palhinha inicial. A complexidade não vem dos passos em si.</p>
<ul>
<li><strong>Extração:</strong> Para algumas coisas, posso utilizar os .run que ficam guardados localmente, para projetos maiores posso pegar runs de lugares como Slay the Report ou datasets espalhados por aí. Para o primeiro caso, já criei um script curtinho em Python que lê todas as runs e as guarda sem edição em um arquivo só, para facilitar processos futuros.</li>
<li><strong>Normalização:</strong> O post desse mês basicamente será quase inteiro sobre normalização dos dados, já que apesar de extremamente útil, os dados da run são&hellip;bagunçados&hellip;para poupar as palavras que usei pra reclamar sobre reclamando com amigos.</li>
<li><strong>Análise:</strong> Por que a gente precisa usar os dados para alguma coisa né? Eu tenho algumas ideias básicas e outras mais ousadas sobre o que quero fazer, mas fica pra depois. :p</li>
<li><strong>Visualização:</strong> Vai ser o ponto que eu vou tentar ignorar ao máximo mesmo sendo algo que eu precisava aprender meio com urgência. Pelo lado bom, decidi que vou focar em Tableau e Seaborn para isso, PowerBI por algum motivo trava quando eu tento exportar os dados de <strong>meras</strong> 600 runs, pffft.</li>
</ul>
<h2 id="extração">Extração</h2>
<p>Não tem muito a ser falado aqui, começando com projetos menores, em poucas linhas consegui pegar todos os .run e salvar tudo em um grande .json com os dados intactos, usando o <strong>run_id</strong>(uuid) dos próprios arquivos para evitar duplicidade. Também só guardei runs que não forem dailies, visto que os modificadores impactam bastante quase tudo que acontece.</p>
<h2 id="normalização---parte-1-a-parte-fácil">Normalização - Parte 1 (a parte fácil)</h2>
<p>Apesar de todos os arquivos serem .run que vieram do mesmo jogo, é necessária uma normalização, já que tem várias chaves que são inúteis ou redundantes, como <code>is_prod</code>, que era usada durante a alpha. Como não tenho runs o bastante pois sempre esqueço de ligar, também removi as chaves relacionadas a mods, como os status específicos de cada relíquia.</p>
<p>Outra parte importante é normalizar tipagem de algumas coisas, visto que em alguns lugares os andares do jogo estão como inteiros, e em outros como float (sempre vai ser um número inteiro).</p>
<p>Também tem algumas coisas engraçadinhas, as classes estão definidas como <code>DEFECT, IRONCLAD, WATCHER</code>, mas a Silent está como <code>THE_SILENT</code>.</p>
<p>Várias cartas, relíquias e eventos estão com nomes da Beta, coisas com apóstrofo as vezes perdem espaçamento, enfim.</p>
<p>Não é tão difícil, mas é super importante, para que a base de dados seja reliable a longo prazo sem manutenção.</p>
<h2 id="normalização---parte-2-eu-vou-explodir">Normalização - Parte 2 (eu vou explodir)</h2>
<p>Nem tudo são flores. Um dos meus objetivos é converter as runs em um formato que seja possível ver EXATAMENTE qual foi a decisão do player e suas alternativas (quando possível). Slay the Spire é um jogo cheio de decisões e possibilidades, e o log das decisões é baseado, em sua grande parte, em como vai aparecer no <strong>Match History</strong>.</p>
<p>Então vamos supor que eu queira recriar os dados do andar <strong>7</strong>. Okay, segundo a chave <code>path_per_floor[7]</code>, o resultado é <code>?</code>, que significa que pode ser um evento, ou outra coisa como um combate ou um baú do tesouro.</p>
<p>Ainda tenho que ver com calma se vai ser <strong>sempre</strong> assim, mas nesse caso era um Tesouro, que é possível verificar pelo <code>path_taken[7]</code>, que retorna <code>T</code>.</p>
<p>Até aí okay, mas e se eu te falar que <code>path_per_floor</code> tem <strong>56</strong> valores nessa run, enquanto <strong>path_taken</strong> tem <strong>52</strong>? É explicável, mas para automatizar isso você já tem que criar a primeira exceção. Mesmo que fosse usado só o <code>path_taken</code>, que é mais preciso, a run teve, segundo <code>max_floor</code>, <strong>57</strong> floors. Ironicamente, outros valores que são separados por andar possuem no máximo <strong>55</strong>.</p>
<p>Deixe-me te explicar enquanto eu crio mais uma dúvida na sua cabeça:</p>
<p>Pelo próprio jogo, no match history, uma run começa no andar <strong>1</strong> e vai até o andar <strong>57</strong>. No Andar <strong>1</strong> sempre vai começar com um <code>M</code> (batalha contra monstro normal).</p>
<p><code>path_per_floor</code> considera todos os andares do jogo, incluindo os que não foram tomadas decisões, que estão ali como <code>null</code>. Em uma run na dificuldade mais alta, que vai o mais longe possível, as ocorrências de <code>null</code> são após o primeiro e segundo bosses, aonde você vai para um andar abrir um baú de tesouro, após o terceiro boss, em que você irá usar chaves para abrir o caminho secreto, e logo após o heart, que representa o fim do jogo. <code>56 - 4 = 52</code>, a conta bate, graças a deus.</p>
<p>Mas e por que <code>max_floor</code> é 57? ÓTIMA PERGUNTA, não existe um motivo, mas minha interpretação pessoal é que o jogo considera o evento do <code>Neow</code>, que precede todas as runs, como um andar.</p>
<p>Antes de toda run começar, a grandiosa baleia Neow lhe oferece algumas opções para facilitar sua vida na run. Quanto melhor a recompensa, maior o risco, podendo lhe dar dano, retirar seu gold, e, às vezes, lhe dar uma curse. A blessing fica em <code>neow_bonus</code>, enquanto o custo fica em <code>neow_cost</code>.</p>
<p>Parece simples né? NÃO.</p>
<p>Vou usar uma run de exemplo, o <code>neow_bonus</code> foi <code>ONE_RARE_RELIC</code>. Qual relic? Vamos descobrir!</p>
<p>existe o <code>relics_obtained</code>, que nesse caso está assim:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;relics_obtained&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="nt">&#34;floor&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;Turnip&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="nt">&#34;floor&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;Boot&#34;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="nt">&#34;floor&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;Gremlin Horn&#34;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">]</span></span></span></code></pre></div><p>A primeira relíquia da lista é uma <code>Turnip</code>, só que ela foi adquirida no andar <code>6</code>, em um tesouro.</p>
<p>Existe algum outro lugar? Graças a deus existe! A chave <code>relics</code>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="ln">1</span><span class="cl"><span class="s2">&#34;relics&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="s2">&#34;Cracked Core&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="s2">&#34;Gambling Chip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="s2">&#34;Turnip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="s2">&#34;Boot&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">    <span class="s2">&#34;Gremlin Horn&#34;</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="p">]</span></span></span></code></pre></div><p>Com as informações passadas, é possível deduzir que a relíquia obtida foi <code>Gambling Chip</code>, já que a <code>Cracked Core</code> é a relíquia inicial da classe <code>DEFECT</code>.</p>
<p>Para automatizar isso, uma pessoa poderia dizer para usar o segundo item da lista ao detectar o evento, mas infelizmente existe uma exceção que tornaria essa ideia errada:</p>
<ul>
<li>Existe um evento aonde pedem uma relíquia sua em troca de outra relíquia, é possível que a relíquia obtida nesse evento suma, a nova relíquia vai para o final da fila.</li>
</ul>
<p>Isso torna fazer um track apropriado das relíquias uma tarefa bem difícil. E a Curse?</p>
<p><code>card_choices</code> começa com a escolha do primeiro combate, e possui apenas escolhas que envolvem opções.</p>
<p>Vamos ver todas as cartas em <code>master_deck</code>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;master_deck&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="s2">&#34;AscendersBane&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="s2">&#34;Strike_B&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="s2">&#34;Strike_B&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="s2">&#34;Strike_B&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="s2">&#34;Strike_B&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="s2">&#34;Defend_B&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="s2">&#34;Defend_B&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="s2">&#34;Defend_B&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="s2">&#34;Defend_B&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="s2">&#34;Zap+1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="s2">&#34;Dualcast&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="s2">&#34;Doom and Gloom&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="s2">&#34;Coolheaded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="s2">&#34;Coolheaded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="s2">&#34;Undo&#34;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">]</span></span></span></code></pre></div><p>A única curse no deck é <code>AscendersBane</code>, que é adicionada em todo deck após uma certa dificuldade. Para não extender demais, encontramos em <code>event_choices</code>, que segue esse formato:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="s2">&#34;event_choices&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">            <span class="nt">&#34;cards_removed&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">                <span class="s2">&#34;Doubt&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">            <span class="nt">&#34;damage_healed&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="nt">&#34;gold_gain&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="nt">&#34;player_choice&#34;</span><span class="p">:</span> <span class="s2">&#34;Card Removal&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="nt">&#34;damage_taken&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">            <span class="nt">&#34;max_hp_gain&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">            <span class="nt">&#34;max_hp_loss&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="nt">&#34;event_name&#34;</span><span class="p">:</span> <span class="s2">&#34;Golden Wing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="nt">&#34;floor&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">            <span class="nt">&#34;gold_loss&#34;</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="p">},</span></span></span></code></pre></div><p>Achamos a curse! Dá para deduzir pois ela foi removida logo cedo, no andar 2 (o andar 1 sempre vai ser um combate). Mas não existia menção a ela em nenhum lugar.</p>
<p>Ainda sobre <code>event_choices</code>, existe um evento com vampiros, que substituem cartas <code>strike</code> no seu deck por cartas <code>bite</code>. Apesar de no exemplo acima ter <code>cards_removed</code>, nesse outro já não tem.</p>
<p>Um dos meus objetivos é conseguir guardar as <code>decisões</code> tomadas em todos os andares e o <code>game state</code>, na medida do possível (não tem log detalhado das batalhas, por exemplo), mas essas inconsistências geram várias mini-exceções chatas de lidar.</p>
<p>Existem dois jeitos de guardar o <code>game state</code> e as <code>decisões</code> por turno de forma prática:</p>
<ul>
<li>
<p>Ir de trás pra frente, pegar o estado do jogo no ultimo andar da run, e tentar fazer backtrack para preencher possíveis lacunas.</p>
</li>
<li>
<p>Preencher os dados com Place Holders, que serão meticulosamente investigados e substituídos conforme a run avança.</p>
</li>
</ul>
<p>Enfim, esse é outro projeto que parecia muito mais simples na minha cabeça.</p>
<p>Mais um projeto que será lentamente atualizado, mas pelo menos agora estou anotando o progresso com esses posts.</p>
<p>Obrigada a todos que leram, até a próxima</p>
]]></content:encoded>
    </item>
    <item>
      <title>Project Mono Parte 1 - Fiquei Maluca</title>
      <link>https://cheshireviolet.github.io/blog/fifth/</link>
      <pubDate>Tue, 25 Feb 2025 16:50:27 -0300</pubDate>
      <guid>https://cheshireviolet.github.io/blog/fifth/</guid>
      <description>&lt;p&gt;Bom dia amigos, espero que todos estejam bem! Estive trabalhando no Choncho Adventure enquanto aprendo Pixel Art, fazendo entrevistas de emprego e tentando relaxar. Passei em uma vaga de dados, começo mês que vem! Ai que saudades de um excelzinho!&lt;/p&gt;&#xA;&lt;p&gt;Nisso tudo, no lugar de fazer o primeiro DevLog do jogo, começarei a contar a parte 1 de minha saga em engenharia reversa.&lt;/p&gt;&#xA;&lt;h2 id=&#34;scripts-autohotkey-e-preguiça&#34;&gt;Scripts, AutoHotKey e Preguiça&lt;/h2&gt;&#xA;&lt;p&gt;Lá por 2013~2014 conheci o joguinho Clicker Heroes, na Steam. Fiquei viciada e isso mudou drasticamente minha vida, desde então sempre estou jogando algum jogo Incremental ou Idle. Nessa época, acabei encontrando um Script para AutoHotKey, que fazia prestígios no jogo de forma automática, em loop. Extremamente prático, salvou muito tempo da minha vida.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Bom dia amigos, espero que todos estejam bem! Estive trabalhando no Choncho Adventure enquanto aprendo Pixel Art, fazendo entrevistas de emprego e tentando relaxar. Passei em uma vaga de dados, começo mês que vem! Ai que saudades de um excelzinho!</p>
<p>Nisso tudo, no lugar de fazer o primeiro DevLog do jogo, começarei a contar a parte 1 de minha saga em engenharia reversa.</p>
<h2 id="scripts-autohotkey-e-preguiça">Scripts, AutoHotKey e Preguiça</h2>
<p>Lá por 2013~2014 conheci o joguinho Clicker Heroes, na Steam. Fiquei viciada e isso mudou drasticamente minha vida, desde então sempre estou jogando algum jogo Incremental ou Idle. Nessa época, acabei encontrando um Script para AutoHotKey, que fazia prestígios no jogo de forma automática, em loop. Extremamente prático, salvou muito tempo da minha vida.</p>
<p>Conforme o tempo foi passando, criei meus próprios scripts para alguns jogos. Basicamente qualquer jogo que era uma ação repetitiva que podia ser emulada através de inputs, eu scriptava usando AHK. Até Disgaea, que é minha franquia favorita, foi automatizado (em minha defesa, platinei Disgaea 4 no Ps3, Disgaea 5 no ps4 e zerei Disgaea 1 no PSP).</p>
<p>Ano passado encontrei o jogo Click Click Dig na Steam, que ainda está sendo desenvolvido mas tem a demo disponível e, como de costume, queria criar um script de automação. No caso desse jogo, seria um script simples, que aperta os botões <strong>12345</strong> a cada <strong>X</strong> tempo.</p>
<p>Não lembro a razão, mas tinha decidido que não queria que o script maximizasse a janela, enviasse os inputs e minimizasse depois. Na minha cabeça, o script antigo de Clicker Heroes não precisava fazer isso (Spoiler: Precisava), e então começou a GUERRA.</p>
<h2 id="largando-o-autohotkey">Largando o AutoHotKey</h2>
<p>Tentei ControlSend e milhões de alternativas que encontrei na internet, sem sucesso. Já tinha tentado fazer isso antes, mas nas outras vezes desisti rápido e só segui a vida.</p>
<p>Decidi então que iria <strong>criar um programa que envia os inputs diretamente para o jogo mesmo que esteja minimizado</strong>.</p>
<p><strong>Se você está aqui querendo uma solução simples, o mais fácil seria rodar o jogo e o script em uma Virtual Machine.</strong></p>
<h2 id="winapi">WinAPI</h2>
<p>Aprendi a usar a WinAPI e fui aos testes, sem sucesso, pois o jogo precisava estar maximizado para processar os inputs.</p>
<p>Foi aí que percebi que foi uma ideia bem arrogante, considerando que AHK existe há quase 20 anos e nem eles fizeram dar certo. Até onde eu entendo hoje, é uma <strong>limitação do próprio Windows.</strong></p>
<p>Mas eu não quero soluções fáceis, a teimosia tomou conta de mim e então entrei em um buraco&hellip;levemente diferente do esperado.</p>
<h2 id="dll-injection">DLL Injection</h2>
<p>Não pergunte sobre como cheguei nisso, estava em fase de mania, mas pensei que &ldquo;se não posso enviar os inputs para uma janela minimizada, irei <strong>injetar código que emula os inputs na janela minimizada.</strong></p>
<p>Ideia fofa, porém besta. Nisso, aprendi a criar e injetar DLL em processos, mas os inputs não estavam sendo lidos. Pela última vez nesse texto, <strong>não era possível processar inputs na janela minimizada, não importando de onde eles foram enviados.</strong></p>
<p>Mas agora com o novo conhecimento de injeção de código, existe algo mais interessante do que enviar os inputs!</p>
<h2 id="muita-sede-ao-pote">Muita Sede Ao Pote</h2>
<p>Se eu consigo injetar código diretamente na memória, eu não poderia nesse caso só invocar as funções de cada botão? <strong>Sim, finalmente uma resposta que faz sentido.</strong> O problema agora é que eu não tinha conhecimentos em engenharia reversa. A vez que cheguei mais perto disso foi quando era criança e usava cheat engine para aumentar as moedinhas e comprar a loja toda.</p>
<p>Procurando na internet, você vai encontrar um milhão de videos sobre Cheat Engine, e até mesmo algumas linhas de código sobre injeção de DLL e como alterar dados na memória em tempo real, mas nada de forma muito didática, no final das contas isso é sobre cheat em joguinho, quem que quer realmente aprender sobre né (<strong>resposta: EU, EU QUERIA APRENDER DE VERDADE</strong>).</p>
<p>Mas não foi completamente inútil, é meio impressionante o quanto as pessoas aprendem de assuntos complexos por motivos nada a ver. Nessa brincadeira, com muita paciência descobri como encontrar os Offsets para cada um dos objetos da classe HeroSkill, que é exatamente o que eu preciso.</p>
<p>Meu problema agora era aprender a instanciar os métodos de uma classe. Pesquisei bastante e não encontrei muitas respostas sobre, visto que o próprio CheatEngine tem função para dissecar jogos que usem MonoCLR e invocar métodos, não há muito interesse nesse tipo de conteúdo. E sim, essa seria outra solução, mas o objetivo agora ia além de fazer um script para o Click Click Dig, eu estava realmente intrigada com tudo isso.</p>
<p>Esse post todo se passou em 2024, mas não foi o fim da história! Mês que vem (ou talvez em Abril) vem a parte 2, obrigada por ter lido!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Ano novo</title>
      <link>https://cheshireviolet.github.io/blog/fourth/</link>
      <pubDate>Fri, 10 Jan 2025 00:55:51 -0300</pubDate>
      <guid>https://cheshireviolet.github.io/blog/fourth/</guid>
      <description>&lt;p&gt;Primeiramente, feliz ano novo a todos! Esse post veio um pouco tarde, mas aconteceu bastante coisa na minha vida recentemente. Além disso, ano novo é sempre aquela correria toda.&lt;/p&gt;&#xA;&lt;p&gt;Não gosto de metas de ano novo pois elas mais me atrapalham e diminuem minha força de vontade do que o oposto, mas tenho algumas ideias que pretendo realizar esse ano.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-terminar-o-choncho-adventure-e-minhas-bibliotecas-de-desenvolvimento&#34;&gt;1. Terminar o Choncho Adventure e minhas bibliotecas de desenvolvimento&lt;/h2&gt;&#xA;&lt;p&gt;Esse é o objetivo que mais é algo concreto e não só uma ideia. Comecei a trabalhar nesse joguinho chamado Choncho Adventure, utilizando MonoGame no lugar de uma Game Engine moderna. Isso significa que estou fazendo absolutamente tudo do zero.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Primeiramente, feliz ano novo a todos! Esse post veio um pouco tarde, mas aconteceu bastante coisa na minha vida recentemente. Além disso, ano novo é sempre aquela correria toda.</p>
<p>Não gosto de metas de ano novo pois elas mais me atrapalham e diminuem minha força de vontade do que o oposto, mas tenho algumas ideias que pretendo realizar esse ano.</p>
<h2 id="1-terminar-o-choncho-adventure-e-minhas-bibliotecas-de-desenvolvimento">1. Terminar o Choncho Adventure e minhas bibliotecas de desenvolvimento</h2>
<p>Esse é o objetivo que mais é algo concreto e não só uma ideia. Comecei a trabalhar nesse joguinho chamado Choncho Adventure, utilizando MonoGame no lugar de uma Game Engine moderna. Isso significa que estou fazendo absolutamente tudo do zero.</p>
<p>Por mais que entenda que engines são drasticamente mais eficientes e práticas, gosto de ter total controle sobre o que estou fazendo. Por isso, estou criando junto algumas bibliotecas que irão facilitar minha vida em futuros projetos (caso siga utilizando MonoGame, o que é bem provável considerando que é minha escolha desde a época da XNA).</p>
<p>Depois de quase 15 anos, acho que já deu de ser Game Dev sem jogo lançado.</p>
<h2 id="2-focar-em-menos-projetos-por-vez">2. Focar em menos projetos por vez</h2>
<p>Por uns 3 meses ano passado, estava trabalhando no Choncho Adventures, enquanto trabalhava no meu emprego, enquanto trabalhava em um outro projeto (que pretendo falar sobre <strong>em breve</strong>), enquanto estudava matérias da faculdade e estudava em um Bootcamp.</p>
<p>Talvez tenha sido uma fase estranha, mas ainda não me recuperei completamente desse período, e a falta de foco acaba atrapalhando a longo prazo.</p>
<p>Quero não deixar passar muito de um estudo e um projeto por vez, tanto para não me sobrecarregar, mas também pros passos em frente serem mais nítidos.</p>
<h2 id="3-tomar-jeito-e-modos">3. Tomar jeito e modos</h2>
<p>Não tenho mais idade para agir do jeito que eu agia até pouco tempo atrás. Os últimos meses me ensinaram que dei muita sorte nas coisas não terem dado errado antes, considerando minhas ações imprudentes. E a sorte acabou, não dá pra continuar assim não, nos últimos dois anos meu senso de responsabilidade melhorou bastante, mas ainda tenho vários pontos a melhorar.</p>
<h2 id="coisas-menores-que-não-quero-ir-muito-a-fundo-sobre">Coisas menores que não quero ir muito a fundo sobre</h2>
<ul>
<li>Cuidar melhor das amizades de quem realmente está lá pelo meu bem</li>
<li>Lembrar mais de descansar, não ser tão dura comigo mesma</li>
<li>Aproveitar melhor o presente, sem ignorar o futuro</li>
<li>Fazer (e seguir) um roadmap mais específico para a área que quero seguir</li>
</ul>
<h2 id="conclusão">Conclusão</h2>
<p>Esse ano vai ser difícil, mas vai valer a pena a longo prazo. Uma caixinha de surpresas, mas tentarei diminuir a variância, ou pelo menos aumentar o piso dos resultados.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Compilando a Darknet no Windows 10 e treinando modelo com a YOLOv3</title>
      <link>https://cheshireviolet.github.io/blog/third/</link>
      <pubDate>Tue, 03 Dec 2024 01:43:07 -0300</pubDate>
      <guid>https://cheshireviolet.github.io/blog/third/</guid>
      <description>&lt;h2 id=&#34;introdução&#34;&gt;Introdução&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;AVISO:&lt;/strong&gt; Por mais que seja possível treinar um modelo utilizando a CPU, é um processo extremamente mais demorado do que poderia ser, pela sua própria sanidade, use o Google Collab se possível. Ou alguma distro de linux.&lt;/p&gt;&#xA;&lt;p&gt;Um dos exercícios do Bootcamp de machine learning que estou realizando é realizar exatamente o que diz no título desse post. No caso, a parte de ser no windows é por eu ser cabeça dura demais para só usar o Google Collab e não ter problemas.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="introdução">Introdução</h2>
<p><strong>AVISO:</strong> Por mais que seja possível treinar um modelo utilizando a CPU, é um processo extremamente mais demorado do que poderia ser, pela sua própria sanidade, use o Google Collab se possível. Ou alguma distro de linux.</p>
<p>Um dos exercícios do Bootcamp de machine learning que estou realizando é realizar exatamente o que diz no título desse post. No caso, a parte de ser no windows é por eu ser cabeça dura demais para só usar o Google Collab e não ter problemas.</p>
<p>Se você tentar seguir o tutorial da própria <a href="https://pjreddie.com/darknet/yolo/">Darknet</a>, é possível que você encare os mesmos problemas que eu encarei, então vou explicar como fiz tudo funcionar.</p>
<p>Além disso, essa também é a própria resolução do exercício, uau estamos unindo o útil ao agradável.</p>
<p>Antes de prosseguirmos, caso tenha interesse no artigo sobre a YOLOv3 escrito pelos seus criadores, recomendo <a href="https://arxiv.org/abs/1804.02767">YOLOv3: An Incremental Improvement</a> (está em inglês).</p>
<h2 id="requerimentos">Requerimentos</h2>
<ul>
<li><a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community">Microsoft Visual Studio</a> (Não testei o code, mas talvez funcione)</li>
<li><a href="https://cmake.org/download/">CMake GUI</a></li>
<li>A própria <a href="https://github.com/AlexeyAB/darknet/archive/master.zip">Darknet</a></li>
<li><a href="https://sourceforge.net/projects/opencvlibrary/">OpenCV</a> (Opcional)</li>
<li><a href="https://developer.nvidia.com/cuda-downloads">CUDA</a> (Opcional, precisa ter <strong>GPU DA NVIDIA</strong>, é doloroso se não tiver)</li>
</ul>
<h2 id="compilando-a-darknet">Compilando a Darknet</h2>
<ol>
<li>Extraia o darknet-master.zip</li>
<li>Instale os programas da lista que não foram instalados</li>
<li>Abra o CMake GUI</li>
<li>Browse source -&gt; Selecione a pasta aonde extraiu a darknet.</li>
<li>Browse Build -&gt;  Selecione a pasta aonde quer que seja criada a solução (.sln)</li>
<li>Configure irá carregar todas as opções de configuração da Solução.</li>
<li><strong>Opcional:</strong> Se não for usar CUDA/OpenCV, desmarque as opções ENABLE_CUDA e ENABLE_OPENCV</li>
<li>Generate irá criar a solução no diretório especificado -&gt; Open Project irá abrir a solução no visual studio.</li>
<li>Build Solution (F6) como Release para x64.</li>
</ol>
<p>Os binários estarão na pasta Release no diretório do .sln.</p>
<h2 id="baixando-o-coco-dataset">Baixando o COCO Dataset</h2>
<p>Pelo próprio <a href="https://cocodataset.org/#download">site do COCO</a> eles tem alguns tutoriais de como baixar usando a COCO API, MASK API e através da FiftyOne. Para fins práticos (ou não), estarei seguindo o tutorial do próprio site da Darknet.</p>
<p>Dentro do <em>darknet-master/scripts/</em> tem um arquivo chamado <em>get_coco_dataset.sh</em>, abrindo com um editor de texto, você vai ver que primeiro o arquivo clona a COCO API e cria uma pasta chamada <em>images</em> logo após. Se não tiver git instalado, basta baixar o repositório zipado, igual feito com a darknet.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">git clone https://github.com/pdollar/coco
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">cd</span> coco
</span></span><span class="line"><span class="ln">3</span><span class="cl">mkdir images</span></span></code></pre></div><p>Então ele usa <strong>wget</strong> para baixar alguns arquivos, por fins práticos é mais rápido baixar só clicando neles, mesmo (se não tiver wget para Windows instalado, claro)</p>
<ul>
<li>Os arquivos abaixo são extraídos dentro da pasta images, que acabamos de criar.
<ul>
<li>train2014.zip</li>
<li>val2014.zip</li>
</ul>
</li>
<li>E os arquivos abaixo ficam dentro do diretório da Coco
<ul>
<li>instances_train-val2014.zip</li>
<li>5k.part</li>
<li>trainvalno5k.part</li>
<li>labels.tgz</li>
</ul>
</li>
</ul>
<p>Não colocarei links pois é possível que na data que esteja lendo eles tenham expirado ou até mesmo os trocado (até porque o dataset de 2014 está meio desatualizado, né?). Baixe tudo, é possível que <strong>demore um pouco</strong> (os datasets de treino e validação são bem pesadinhos)</p>
<p>Extraia que foi baixado tudo na pasta aonde Buildou a Darknet. O arquivo labels.tgz gera um arquivo labels.tar. É basicamente um Zip dentro de um Zip, 7Zip descomprime. :</p>
<p>Para finalizar, o script concatena o diretório atual com cada linha dos arquivos e coloca tudo em dois arquivos de texto.</p>
<p>Você pode usar os seguintes comandos no Powershell para realizar essa parte final do script:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Powershell" data-lang="Powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Get-Content</span> <span class="p">.\</span><span class="n">5k</span><span class="p">.</span><span class="py">part</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span> <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">\</span><span class="p">$(</span><span class="nv">$_</span> <span class="o">-replace</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;\&#39;</span><span class="p">)</span><span class="s2">&#34;</span> <span class="o">-replace</span> <span class="s1">&#39;\\+&#39;</span><span class="p">,</span> <span class="s1">&#39;\&#39;</span> <span class="p">}</span> <span class="p">&gt;</span> <span class="n">5k</span><span class="p">.</span><span class="py">txt</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">Get-Content</span> <span class="p">.\</span><span class="n">trainvalno5k</span><span class="p">.</span><span class="py">part</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span> <span class="s2">&#34;</span><span class="nv">$PWD</span><span class="s2">\</span><span class="p">$(</span><span class="nv">$_</span> <span class="o">-replace</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;\&#39;</span><span class="p">)</span><span class="s2">&#34;</span> <span class="o">-replace</span> <span class="s1">&#39;\\+&#39;</span><span class="p">,</span> <span class="s1">&#39;\&#39;</span> <span class="p">}</span> <span class="p">&gt;</span> <span class="n">trainvalno5k</span><span class="p">.</span><span class="n">txt</span></span></span></code></pre></div><h2 id="configurando-a-darknet-para-treinamento-com-a-coco">Configurando a darknet para treinamento com a COCO</h2>
<p>Dentro de <em>darknet-master</em> existe uma pasta chamada <em>cfg</em> e outra chamada <em>data</em>. Copie ambas e cole-as dentro de <em>Release</em>. Dentro de <em>cfg</em>, nós precisamos editar o arquivo <em>coco.data</em></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">classes = 80
</span></span><span class="line"><span class="ln">2</span><span class="cl">train = Caminho até trainvalno5k.txt
</span></span><span class="line"><span class="ln">3</span><span class="cl">valid = Caminho até 5k.txt
</span></span><span class="line"><span class="ln">4</span><span class="cl">names = Caminho para data/coco.names (A pasta que acabou de copiar)
</span></span><span class="line"><span class="ln">5</span><span class="cl">backup = backup
</span></span><span class="line"><span class="ln">6</span><span class="cl">eval = coco</span></span></code></pre></div><p>Também precisamos editar o arquivo <em>yolo.cfg</em>, já que está configurado para testes, e não treinamento.</p>
<p>Altere as linhas abaixo:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cfg" data-lang="cfg"><span class="line"><span class="ln">1</span><span class="cl"><span class="na">batch</span><span class="o">=</span><span class="s">64</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="na">subdivisions</span><span class="o">=</span><span class="s">8</span></span></span></code></pre></div><p>Copie o arquivo <em>pthreadVC2.dll</em> da pasta <em>darknet-master\3rdparty\pthreads\bin</em> para a pasta Release.</p>
<p>Só falta um ultimo arquivo, o <a href="https://pjreddie.com/media/files/darknet53.conv.74">darknet53.conv.74</a>, que é um arquivo pre-treinado de pesos. Coloque-o em Releases.</p>
<h2 id="treinando-o-modelo-finalmente">Treinando o Modelo, finalmente</h2>
<p>No powershell, basta executar:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Powershell" data-lang="Powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">./</span><span class="n">darknet</span> <span class="n">detector</span> <span class="n">train</span> <span class="p">*</span><span class="n">caminho</span> <span class="n">completo</span><span class="p">*\</span><span class="n">cfg</span><span class="p">\</span><span class="n">coco</span><span class="p">.</span><span class="py">data</span> <span class="p">*</span><span class="n">caminho</span> <span class="n">completo</span><span class="p">*\</span><span class="n">cfg</span><span class="p">\</span><span class="n">yolov3</span><span class="p">.</span><span class="py">cfg</span> <span class="n">darknet53</span><span class="p">.</span><span class="py">conv</span><span class="p">.</span><span class="mf">74</span></span></span></code></pre></div><p>Trocando o caminho completo pelo&hellip;caminho completo&hellip;</p>
<p>Esse processo vai demorar&hellip;muitos dias&hellip;por favor não cometa o mesmo erro que eu.</p>
<p>Após treinado, será gerado um arquivo .weight, que pode ser utilizado para detecções, como no exemplo abaixo:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">./darknet detect cfg/yolov3.cfg *arquivo.weight* data/dog.jpg</span></span></code></pre></div><h2 id="bônus-ah-mas-eu-tenho-uma-placa-da-amd">Bônus: AH MAS EU TENHO UMA PLACA DA AMD</h2>
<p>Existe um repositório feito pra isso, mas não sei se é por estar desatualizado ou outro motivo, simplesmente não consigo compilar.</p>
<p>Talvez faça um post no futuro com uma solução, mas até lá, se quiser se aventurar é só <a href="https://github.com/sowson/darknet?tab=readme-ov-file">clicar aqui</a>.</p>
<h2 id="conclusão">Conclusão</h2>
<p>Da próxima vez irei comprar uma placa da NVIDIA.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Leetcode 128. Longest Consecutive Sequence</title>
      <link>https://cheshireviolet.github.io/blog/second/</link>
      <pubDate>Mon, 02 Dec 2024 01:50:58 -0300</pubDate>
      <guid>https://cheshireviolet.github.io/blog/second/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;Recentemente eu comecei a fazer os desafios do leetcode criado como &lt;a href=&#34;https://leetcode.com/studyplan/top-interview-150/&#34;&gt;problemas de entrevistas da FAANG&lt;/a&gt;, tanto pra refrescar noções de estruturas de dados quanto para praticar python, já que de modo geral por mim faço tudo em C#.&lt;/p&gt;&#xA;&lt;p&gt;Aproveitar a introdução para agradecer a &lt;a href=&#34;https://navendu.me/posts/adding-diagrams-to-your-hugo-blog-with-mermaid/&#34;&gt;este post&lt;/a&gt; pelo tutorial de como implementar mermaid em um fórum feito em hugo, graças ao post não precisei desenhar as árvores, e sim usar markdown :D&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="intro">Intro</h2>
<p>Recentemente eu comecei a fazer os desafios do leetcode criado como <a href="https://leetcode.com/studyplan/top-interview-150/">problemas de entrevistas da FAANG</a>, tanto pra refrescar noções de estruturas de dados quanto para praticar python, já que de modo geral por mim faço tudo em C#.</p>
<p>Aproveitar a introdução para agradecer a <a href="https://navendu.me/posts/adding-diagrams-to-your-hugo-blog-with-mermaid/">este post</a> pelo tutorial de como implementar mermaid em um fórum feito em hugo, graças ao post não precisei desenhar as árvores, e sim usar markdown :D</p>
<h2 id="o-problema-da-vez">O problema da vez</h2>
<p><a href="https://leetcode.com/problems/longest-consecutive-sequence/description/?envType=study-plan-v2&amp;envId=top-interview-150">Dada uma array não ordenada de inteiros <em>nums</em>, retorne o tamanho da sequencia mais longa de valores consecutivos.</a></p>
<p>Exemplo:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Markdown" data-lang="Markdown"><span class="line"><span class="ln">1</span><span class="cl">Input: nums = [100,4,200,1,3,2]
</span></span><span class="line"><span class="ln">2</span><span class="cl">Output: 4
</span></span><span class="line"><span class="ln">3</span><span class="cl">Explicação: A sequencia mais longa de valores consecutivos é [1,2,3,4], o que torna a resposta 4.</span></span></code></pre></div><p><strong>Todos os exemplos desse post vão usar o input acima como base</strong> (sim, adicionei essa linha de texto após repetir algumas vezes que tava usando o exemplo acima)</p>
<p>A solução mais simples é ordenar a array, mas além de chata, é uma resposta pouco eficiente.</p>
<p>Na classificação do plano de estudos, esse problema está na lista de Hashmaps, porém, nas tags, está o termo <em>Union Find</em>, que eu nunca tinha ouvido falar antes.</p>
<h2 id="union-find-teoria">Union Find: Teoria</h2>
<p>O resumo é que você separa os valores por critérios, gerando uma árvore muito eficiente de ser percorrida.</p>
<p>Exemplo:</p>
<div class="mermaid">
flowchart TD
  1 --> 2 --> 3 --> 4
  100
  200
</div>

<p><em>Tá, mas e aí?</em> Esse algoritmo é interessante porque ele possui duas funções: Union e Find (criatividade torando). É aí que vem a brincadeira de verdade:</p>
<h3 id="findn">Find(n)</h3>
<p>Sempre irá retornar a raiz do nodo. Find(4) retornaria 1, Find(1) retornaria 1.</p>
<p>Uma coisa importante dessa estrutura é que para fins práticos, o parente da raiz será sempre a própria raiz.</p>
<p>Para implementar, é bem simples:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">Parent</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="k">if</span> <span class="n">Parent</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">x</span><span class="p">:</span> <span class="c1">#se não for a raiz</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">        <span class="k">return</span> <span class="n">find</span><span class="p">(</span><span class="n">Parent</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="c1">#repete a função, porém com o Parent de parâmetro</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">        <span class="k">return</span> <span class="n">x</span> <span class="c1">#se for a raiz, retorna ela mesma</span></span></span></code></pre></div><h3 id="unionxy">Union(x,y)</h3>
<p>Junta dois grupos, a partir de suas raízes.</p>
<p>Exemplo: Union(4,200) alteraria a raiz de 200 para 1, que é a raiz de 4.</p>
<div class="mermaid">
flowchart TD
  1 --> 2 --> 3 --> 4
  1 --> 200
  100
</div>

<p>Outra implementação simples:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">Parent</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="n">Parent</span><span class="p">[</span><span class="n">Find</span><span class="p">(</span><span class="n">y</span><span class="p">)]</span> <span class="o">=</span> <span class="n">Find</span><span class="p">(</span><span class="n">x</span><span class="p">)</span></span></span></code></pre></div><h2 id="resolvendo-o-problema">Resolvendo o problema</h2>
<p>É minha primeira vez resolvendo um problema usando Union Find, então é possível que minha resposta não esteja optimizada, ainda assim fiquei contente com o resultado.</p>
<p>A galera do leetcode gosta bastante de colocar casos excepcionais, porém válidos, nos testes, então logo de cara:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">if</span> <span class="n">nums</span> <span class="o">==</span> <span class="p">[]:</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">        <span class="k">return</span> <span class="mi">0</span></span></span></code></pre></div><p>Ok, podemos começar a resolução real, agora. Declarando as 3 variáveis que serão usadas:</p>
<ul>
<li><em>graph</em> é um dicionário aonde sua chave é <em>nums[i]</em>, e o valor é a raiz de <em>nums[i]</em></li>
<li><em>graph_sum</em> é um dicionario aonde sua chave é <em>nums[i]</em> e o valor é o tamanho da sua sequência</li>
<li><em>longest</em> é o tamanho da sequencia mais longa</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">graph</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">graph_sum</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">longest</span> <span class="o">=</span> <span class="mi">0</span></span></span></code></pre></div><p>Find e Union, conforme a estrutura que estamos lidando</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="k">if</span> <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="k">return</span> <span class="n">i</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">if</span> <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">return</span> <span class="n">find</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="k">def</span> <span class="nf">union</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">root_i</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="n">root_j</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="n">graph</span><span class="p">[</span><span class="n">root_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">root_j</span></span></span></code></pre></div><p>E agora a parte que importa, que é bem pequena na verdade:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="n">graph_sum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">            <span class="n">union</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">            <span class="n">graph_sum</span><span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">graph_sum</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="n">union</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">            <span class="n">graph_sum</span><span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">graph_sum</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="k">if</span> <span class="n">longest</span> <span class="o">&lt;</span> <span class="n">graph_sum</span><span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]]:</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="n">longest</span> <span class="o">=</span> <span class="n">graph_sum</span><span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="k">return</span> <span class="n">longest</span></span></span></code></pre></div><p>Vamos quebrar por partes, pra simplificar. Primeiro, se o item ainda não existe em nossa árvore, adicionamos ele, com a raiz sendo ele mesmo.
Também adicionamos no dicionário de sequencias, sua sequencia sendo 1.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="n">graph_sum</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span></span></span></code></pre></div><p>Ainda dentro do if acima, para evitar duplicidade, se suas sequencias existem (i-1 e i+1) na arvore, realizamos o Union, e então adicionamos o tamanho da sequencia que foi adicionada a raiz.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="n">union</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="n">graph_sum</span><span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">graph_sum</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="n">union</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">    <span class="n">graph_sum</span><span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">graph_sum</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span></span></span></code></pre></div><p>E por fim, se o tamanho da sequencia atual for maior que a maior sequencia registrada, atualizamos o <em>longest</em> para a nova maior sequencia. Então o loop continua com o próximo item da lista de entrada, e retorna o valor de <em>longest</em></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">if</span> <span class="n">longest</span> <span class="o">&lt;</span> <span class="n">graph_sum</span><span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]]:</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">        <span class="n">longest</span> <span class="o">=</span> <span class="n">graph_sum</span><span class="p">[</span><span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="k">return</span> <span class="n">longest</span></span></span></code></pre></div><h2 id="conclusão">Conclusão</h2>
<p>Sinto que realizei algum teste de entrevista que tinha um problema parecido, ou que pelo menos eu poderia ter usado Union Find pra chegar em uma solução mais eficiente.</p>
<p>Após uma pesquisada, realmente é algo que é visto com certa frequência em entrevistas, então vale muito a pena dar uma olhada e brincar!</p>
]]></content:encoded>
    </item>
    <item>
      <title>O primeiro post é sempre o mais confuso</title>
      <link>https://cheshireviolet.github.io/blog/first/</link>
      <pubDate>Wed, 27 Nov 2024 20:35:43 -0300</pubDate>
      <guid>https://cheshireviolet.github.io/blog/first/</guid>
      <description>&lt;p&gt;Bom, vamos lá né. Primeiro post é sempre complicado, você tem que se apresentar, mas já tem uma micro apresentação na página inicial. Palavras são difíceis, porque introdução nunca é o que você realmente quer falar sobre.&lt;/p&gt;&#xA;&lt;p&gt;A ideia de criar esse blog surgiu da vontade de falar sobre meus projetos, porém fora do padrão microblogging. Às vezes você tem uma ideia muito boa porém despedaçar em mini posts e futuramente perder tudo é&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;chato.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Bom, vamos lá né. Primeiro post é sempre complicado, você tem que se apresentar, mas já tem uma micro apresentação na página inicial. Palavras são difíceis, porque introdução nunca é o que você realmente quer falar sobre.</p>
<p>A ideia de criar esse blog surgiu da vontade de falar sobre meus projetos, porém fora do padrão microblogging. Às vezes você tem uma ideia muito boa porém despedaçar em mini posts e futuramente perder tudo é&hellip;&hellip;&hellip;&hellip;chato.</p>
<p>Ao mesmo tempo tenho trabalhado em formas de manter o foco e observar meu progresso, e um blog é exatamente isso.</p>
<p>Também é <del>, em teoria,</del> uma forma de espalhar conhecimento adiante. Nunca se sabe quando alguém do nada acha um post seu com uma solução para um problema.</p>
<p>Enfim, não faço ideia do quão longe esse blog vai, mas é mais um passo pra frente.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
